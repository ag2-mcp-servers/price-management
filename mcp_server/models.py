# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:09:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class StatusInfo(BaseModel):
    subsidyEnrolled: Optional[bool] = Field(
        None,
        description='A Boolean parameter that allows all sellers to completely enroll in or out of the Competitive Price Adjustment program',
    )
    subsidyPreference: Optional[bool] = Field(
        None,
        description='A Boolean parameter that determines whether offer level subsidy setting override seller level subsidy setting',
    )


class CapProgramResponse(BaseModel):
    martId: Optional[str] = Field(
        None, description='A unique ID that a user or seller uses for a marketplace.'
    )
    statusInfo: Optional[StatusInfo] = None


class Cause(BaseModel):
    code: Optional[str] = None
    description: Optional[str] = None
    field: Optional[str] = None
    type: Optional[str] = None


class Currency(Enum):
    USD = 'USD'
    CAD = 'CAD'


class ComparisonPrice(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class CurrentPrice(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class FeedId(BaseModel):
    additionalAttributes: Optional[Dict[str, Any]] = None
    errors: Optional[Dict[str, Any]] = None
    feedId: Optional[str] = Field(
        None,
        description='A unique ID, returned from the Bulk Upload API, used for tracking the feed file',
    )


class Category(Enum):
    APPLICATION = 'APPLICATION'
    SYSTEM = 'SYSTEM'
    REQUEST = 'REQUEST'
    DATA = 'DATA'


class GatewayErrorCategory(Enum):
    INTERNAL_DATA_ERROR = 'INTERNAL_DATA_ERROR'
    EXTERNAL_DATA_ERROR = 'EXTERNAL_DATA_ERROR'
    SYSTEM_ERROR = 'SYSTEM_ERROR'


class Severity(Enum):
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'


class GatewayError(BaseModel):
    category: Optional[Category] = None
    causes: Optional[List[Cause]] = None
    code: str
    component: Optional[str] = None
    description: Optional[str] = None
    errorIdentifiers: Optional[Dict[str, Dict[str, Any]]] = None
    field: Optional[str] = None
    gatewayErrorCategory: Optional[GatewayErrorCategory] = None
    info: Optional[str] = None
    serviceName: Optional[str] = None
    severity: Optional[Severity] = None
    type: Optional[str] = None


class Error(BaseModel):
    category: Optional[Category] = None
    causes: Optional[List[Cause]] = None
    code: str
    component: Optional[str] = None
    description: Optional[str] = None
    errorIdentifiers: Optional[Dict[str, Dict[str, Any]]] = None
    field: Optional[str] = None
    gatewayErrorCategory: Optional[GatewayErrorCategory] = None
    info: Optional[str] = None
    serviceName: Optional[str] = None
    severity: Optional[Severity] = None
    type: Optional[str] = None


class ItemPriceResponse(BaseModel):
    errors: Optional[List[Error]] = None
    mart: Optional[str] = Field(
        None, description='Marketplace name. Example: Walmart-US'
    )
    message: Optional[str] = Field(
        None, description='A message of acknowledgement for a price update'
    )
    sku: Optional[str] = Field(
        None,
        description='An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.',
    )
    statusCode: Optional[int] = None


class ComparisonPrice1(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class ComparisonPriceType(Enum):
    BASE = 'BASE'


class CurrentPrice1(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class CurrentPriceType(Enum):
    BASE = 'BASE'
    REDUCED = 'REDUCED'
    CLEARANCE = 'CLEARANCE'


class PriceDisplayCodes(Enum):
    CART = 'CART'
    CHECKOUT = 'CHECKOUT'


class ProcessMode(Enum):
    UPSERT = 'UPSERT'
    DELETE = 'DELETE'


class PricingItem(BaseModel):
    comparisonPrice: Optional[ComparisonPrice1] = Field(
        None, description='This is applicable only for promotions'
    )
    comparisonPriceType: Optional[ComparisonPriceType] = Field(
        None, description='This is applicable only for promotions'
    )
    currentPrice: CurrentPrice1
    currentPriceType: CurrentPriceType = Field(
        ..., description='This is applicable only for both promotions and price'
    )
    effectiveDate: Optional[datetime] = Field(
        None, description='This is applicable only for promotions'
    )
    expirationDate: Optional[datetime] = Field(
        None, description='This is applicable only for promotions'
    )
    priceDisplayCodes: Optional[PriceDisplayCodes] = Field(
        None,
        description='Represent promo placement. This is applicable only for promotions',
    )
    processMode: Optional[ProcessMode] = Field(
        None, description='This is applicable only for promotions'
    )
    promoId: Optional[str] = Field(
        None, description='This is applicable only for promotions'
    )


class ReplaceAll(Enum):
    true = 'true'
    false = 'false'


class Price(BaseModel):
    definitions: Optional[Dict[str, Any]] = None
    offerId: Optional[str] = Field(
        None, description='This is applicable only for promotions'
    )
    pricing: List[PricingItem]
    replaceAll: Optional[ReplaceAll] = Field(
        None, description='This is applicable only for promotions'
    )
    sku: str


class ComparisonPrice2(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class CurrentPrice2(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class Pricing(BaseModel):
    comparisonPrice: Optional[ComparisonPrice2] = Field(
        None, description='This is applicable only for promotions'
    )
    comparisonPriceType: Optional[ComparisonPriceType] = Field(
        None, description='This is applicable only for promotions'
    )
    currentPrice: CurrentPrice2
    currentPriceType: CurrentPriceType = Field(
        ..., description='This is applicable only for both promotions and price'
    )
    effectiveDate: Optional[datetime] = Field(
        None, description='This is applicable only for promotions'
    )
    expirationDate: Optional[datetime] = Field(
        None, description='This is applicable only for promotions'
    )
    priceDisplayCodes: Optional[PriceDisplayCodes] = Field(
        None,
        description='Represent promo placement. This is applicable only for promotions',
    )
    processMode: Optional[ProcessMode] = Field(
        None, description='This is applicable only for promotions'
    )
    promoId: Optional[str] = Field(
        None, description='This is applicable only for promotions'
    )


class V3CppreferencePostRequest(BaseModel):
    subsidyEnrolled: Optional[bool] = Field(
        None,
        description='A Boolean parameter that allows all sellers to completely enroll in or out of the Competitive Price Adjustment program',
    )
    subsidyPreference: Optional[bool] = Field(
        None,
        description='A Boolean parameter that determines whether offer level subsidy setting override seller level subsidy setting',
    )


class V3CppreferencePostResponse(BaseModel):
    martId: Optional[str] = Field(
        None, description='A unique ID that a user or seller uses for a marketplace.'
    )
    statusInfo: Optional[StatusInfo] = None


class FeedType(Enum):
    price = 'price'
    CPT_SELLER_ELIGIBILITY = 'CPT_SELLER_ELIGIBILITY'


class V3FeedsPostRequest(BaseModel):
    file: bytes = Field(..., description='Feed file to upload')


class V3FeedsPostResponse(BaseModel):
    additionalAttributes: Optional[Dict[str, Any]] = None
    errors: Optional[Dict[str, Any]] = None
    feedId: Optional[str] = Field(
        None,
        description='A unique ID, returned from the Bulk Upload API, used for tracking the feed file',
    )


class ComparisonPrice3(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class CurrentPrice3(BaseModel):
    amount: Optional[float] = None
    currency: Optional[Currency] = None


class PricingItem1(BaseModel):
    comparisonPrice: Optional[ComparisonPrice3] = Field(
        None, description='This is applicable only for promotions'
    )
    comparisonPriceType: Optional[ComparisonPriceType] = Field(
        None, description='This is applicable only for promotions'
    )
    currentPrice: CurrentPrice3
    currentPriceType: CurrentPriceType = Field(
        ..., description='This is applicable only for both promotions and price'
    )
    effectiveDate: Optional[datetime] = Field(
        None, description='This is applicable only for promotions'
    )
    expirationDate: Optional[datetime] = Field(
        None, description='This is applicable only for promotions'
    )
    priceDisplayCodes: Optional[PriceDisplayCodes] = Field(
        None,
        description='Represent promo placement. This is applicable only for promotions',
    )
    processMode: Optional[ProcessMode] = Field(
        None, description='This is applicable only for promotions'
    )
    promoId: Optional[str] = Field(
        None, description='This is applicable only for promotions'
    )


class V3PricePutRequest(BaseModel):
    definitions: Optional[Dict[str, Any]] = None
    offerId: Optional[str] = Field(
        None, description='This is applicable only for promotions'
    )
    pricing: List[PricingItem1]
    replaceAll: Optional[ReplaceAll] = Field(
        None, description='This is applicable only for promotions'
    )
    sku: str


class Error1(BaseModel):
    category: Optional[Category] = None
    causes: Optional[List[Cause]] = None
    code: str
    component: Optional[str] = None
    description: Optional[str] = None
    errorIdentifiers: Optional[Dict[str, Dict[str, Any]]] = None
    field: Optional[str] = None
    gatewayErrorCategory: Optional[GatewayErrorCategory] = None
    info: Optional[str] = None
    serviceName: Optional[str] = None
    severity: Optional[Severity] = None
    type: Optional[str] = None


class V3PricePutResponse(BaseModel):
    errors: Optional[List[Error1]] = None
    mart: Optional[str] = Field(
        None, description='Marketplace name. Example: Walmart-US'
    )
    message: Optional[str] = Field(
        None, description='A message of acknowledgement for a price update'
    )
    sku: Optional[str] = Field(
        None,
        description='An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.',
    )
    statusCode: Optional[int] = None


class Error2(BaseModel):
    category: Optional[Category] = None
    causes: Optional[List[Cause]] = None
    code: str
    component: Optional[str] = None
    description: Optional[str] = None
    errorIdentifiers: Optional[Dict[str, Dict[str, Any]]] = None
    field: Optional[str] = None
    gatewayErrorCategory: Optional[GatewayErrorCategory] = None
    info: Optional[str] = None
    serviceName: Optional[str] = None
    severity: Optional[Severity] = None
    type: Optional[str] = None


class V3PricePutResponse1(BaseModel):
    errors: Optional[List[Error2]] = None
    mart: Optional[str] = Field(
        None, description='Marketplace name. Example: Walmart-US'
    )
    message: Optional[str] = Field(
        None, description='A message of acknowledgement for a price update'
    )
    sku: Optional[str] = Field(
        None,
        description='An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.',
    )
    statusCode: Optional[int] = None
